{"metadata":{"title":"Line oriented String Packets","categoryPathComponent":"Tutorial-TOC","role":"project","category":"Tutorials"},"hierarchy":{"modules":[{"reference":"doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC\/Reading-log-files","projects":[{"reference":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-Logfile","sections":[{"kind":"task","reference":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-Logfile#Define-the-Packet"},{"kind":"task","reference":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-Logfile#Setup-the-Packet-Processor"}]}]},{"reference":"doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC\/Processing-messages-from-sockets","projects":[{"reference":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-JSON","sections":[{"kind":"task","reference":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-JSON#WebSocket"},{"kind":"task","reference":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-JSON#Raw-sockets"}]}]},{"reference":"doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC\/Converting-UTF-8-byte-streams-to-Strings","projects":[{"reference":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/DataPacket-utf8","sections":[{"kind":"task","reference":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/DataPacket-utf8#The-naive-way"},{"kind":"task","reference":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/DataPacket-utf8#Processing-a-stream"}]}]}],"reference":"doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC","paths":[["doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC","doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC\/$volume","doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC\/Reading-log-files"]]},"schemaVersion":{"major":0,"minor":2,"patch":0},"kind":"project","identifier":{"url":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-Logfile","interfaceLanguage":"swift"},"sections":[{"kind":"hero","title":"Line oriented String Packets","chapter":"Reading log files","estimatedTimeInMinutes":5,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A simple variable-length packet for reading lines of text (e.g. from log files)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By implementing this, you will have a simple way to process text one line at a time.  This can be used on very large files while maintaining a fairly low memory footprint."}]}]},{"kind":"tasks","tasks":[{"anchor":"Define-the-Packet","title":"Define the Packet","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Follow these steps to declare a new packet type."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"stringpacket-logfile-01-01","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the data you’ll want to collect from your packet."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For this simple case, we simple want a line of text."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"stringpacket-logfile-01-02","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare your packet as a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/DataPacket"},{"type":"text","text":" if you will be reading byte-streams or a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/StringPacket"},{"type":"text","text":" if you will be reading text characters."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since we’re working with text, we’ll declare this as a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/StringPacket"},{"type":"text","text":".  Add the required static properties."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"stringpacket-logfile-01-03","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now define the rules for how to find the first packet.  "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Important"}]},{"type":"text","text":": You must correctly specify the number of characters used to create this packet."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case, it is the number of characters in the line plus the newline character."}]}],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Setup-the-Packet-Processor","title":"Setup the Packet Processor","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we’ll initialize a new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":" setup the packet handlers."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"stringpacket-logfile-02-01","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a packet processor."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To process "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/StringPacket"},{"type":"text","text":"s, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":" must be declared with a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketCollectionType"},{"type":"text","text":"."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"stringpacket-logfile-02-02","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to define what to do when we get a complete line. Here, we’ll just print it to the console."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a Packet Handler with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketProcessor\/addHandler(_:_:)-86o7r"}]}],"type":"step","runtimePreview":null,"media":null},{"code":"stringpacket-logfile-02-03","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, we need a way to receive text.  This may come from a file, socket, etc.  For brevity, the exact mechanism for retrieving text is not shown."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The text sent to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketProcessor\/push(_:)"},{"type":"text","text":" can handle any number of characters.  The text may contain 0 or many newlines.  The Packet Handler will be called exactly once for all complete newlines."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"stringpacket-logfile-02-04","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the case of line handling, we may run into issues where we end the file without a newline.  In this case, we need to inform the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":" of this by calling "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketProcessor\/end()"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"stringpacket-logfile-02-05","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we go back to our NewlinePacket definition."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"stringpacket-logfile-02-06","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To add support for end of file handling, we need to inspect "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketHandlerContext\/isEnded"},{"type":"text","text":" and accept a packet even if no newline is found."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-JSON","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Reading JSON packets from a socket","abstract":[{"type":"text","text":"This example demonstrates how we can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":" to manage different JSON packets read from a WebSocket or raw socket."}]}],"references":{"doc://PacketProcessor/tutorials/Tutorial-TOC/Processing-messages-from-sockets":{"role":"article","title":"Processing messages from sockets","abstract":[],"identifier":"doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC\/Processing-messages-from-sockets","kind":"article","type":"topic","url":"\/tutorials\/tutorial-toc\/processing-messages-from-sockets"},"stringpacket-logfile-02-06":{"syntax":"swift","content":["\/*","See LICENSE file for this sample’s licensing information.","","Abstract:","A simple log file processor","","Created by Danny Sung on 04\/29\/2022.","*\/","","import Foundation","import PacketProcessor","","struct NewlinePacket: StringPacket {","    var text: String","","    \/\/ Required for all Packet definitions","    static var _packetTypeId = UUID()","","    static func findFirstPacket(context: PacketContext, data: String) -> PacketSearchResult<Self>? {","","        let endOfLineIndex: String.Index","        let newlineCount: Int","","        if let newlineIndex = data.firstIndex(of: \"\\n\") {","            endOfLineIndex = newlineIndex","            newlineCount = 1","        } else if context.isEnded {","            endOfLineIndex = data.endIndex","            newlineCount = 0","        } else {","            return nil","        }","","        let payload = data.prefix(upTo: endOfLineIndex)","        let packet = NewlinePacket(text: String(payload))","        return PacketSearchResult(packet: packet, numberOfElementsConsumedByPacket: payload.count+newlineCount)","    }","","}"],"fileName":"NewlinePacket.swift","identifier":"stringpacket-logfile-02-06","type":"file","fileType":"swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":34},{"line":36}]},"stringpacket-logfile-02-02":{"syntax":"swift","content":["\/*","See LICENSE file for this sample’s licensing information.","","Abstract:","A simple log file processor","","Created by Danny Sung on 04\/29\/2022.","*\/","","","import Foundation","import PacketProcessor","","let packetProcessor = PacketProcessor<String>()","","packetProcessor.addHandler(NewlinePacket.self) { packet in","    print(\"Found a full line: \\(packet.text)\")","}"],"fileName":"LogReader.swift","identifier":"stringpacket-logfile-02-02","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}]},"doc://PacketProcessor/tutorials/PacketProcessor/StringPacket-JSON":{"role":"project","title":"Reading JSON packets from a socket","estimatedTime":"10min","abstract":[{"type":"text","text":"This example demonstrates how we can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":" to manage different JSON packets read from a WebSocket or raw socket."}],"identifier":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-JSON","kind":"project","type":"topic","url":"\/tutorials\/packetprocessor\/stringpacket-json"},"doc://PacketProcessor/tutorials/PacketProcessor/StringPacket-Logfile":{"role":"project","title":"Line oriented String Packets","estimatedTime":"5min","abstract":[{"type":"text","text":"A simple variable-length packet for reading lines of text (e.g. from log files)."}],"identifier":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-Logfile","kind":"project","type":"topic","url":"\/tutorials\/packetprocessor\/stringpacket-logfile"},"stringpacket-logfile-01-03":{"syntax":"swift","content":["\/*","See LICENSE file for this sample’s licensing information.","","Abstract:","A simple log file processor","","Created by Danny Sung on 04\/29\/2022.","*\/","","import Foundation","import PacketProcessor","","struct NewlinePacket: StringPacket {","    var text: String","","    \/\/ Required for all Packet definitions","    static var _packetTypeId = UUID()","","    static func findFirstPacket(context: PacketContext, data: String) -> PacketSearchResult<Self>? {","        guard let newlineIndex = data.firstIndex(of: \"\\n\") else {","            return nil","        }","","        let payload = data.prefix(upTo: newlineIndex)","        let packet = NewlinePacket(text: String(payload))","        return PacketSearchResult(packet: packet, numberOfElementsConsumedByPacket: payload.count+1)","    }","","}"],"fileName":"NewlinePacket.swift","identifier":"stringpacket-logfile-01-03","type":"file","fileType":"swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}]},"doc://PacketProcessor/documentation/PacketProcessor/DataPacket":{"role":"symbol","title":"DataPacket","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DataPacket"}],"abstract":[{"type":"text","text":"Byte-oriented packets should conform to "},{"type":"codeVoice","code":"DataPacket"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Examples of this include IP, TCP, and UDP."}],"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/DataPacket","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DataPacket"}],"url":"\/documentation\/packetprocessor\/datapacket"},"doc://PacketProcessor/tutorials/PacketProcessor/StringPacket-JSON#Raw-sockets":{"role":"pseudoSymbol","title":"Raw sockets","abstract":[{"type":"text","text":"This example demonstrates how we can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":" to manage different JSON packets read from a WebSocket or raw socket."}],"identifier":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-JSON#Raw-sockets","kind":"section","type":"section","url":"\/tutorials\/packetprocessor\/stringpacket-json#Raw-sockets"},"doc://PacketProcessor/documentation/PacketProcessor/PacketCollectionType":{"role":"symbol","title":"PacketCollectionType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PacketCollectionType"}],"abstract":[{"type":"text","text":"Protocol used to declare data collection types that can be used by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":"."}],"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketCollectionType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PacketCollectionType"}],"url":"\/documentation\/packetprocessor\/packetcollectiontype"},"doc://PacketProcessor/tutorials/PacketProcessor/StringPacket-JSON#WebSocket":{"role":"pseudoSymbol","title":"WebSocket","abstract":[{"type":"text","text":"This example demonstrates how we can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":" to manage different JSON packets read from a WebSocket or raw socket."}],"identifier":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-JSON#WebSocket","kind":"section","type":"section","url":"\/tutorials\/packetprocessor\/stringpacket-json#WebSocket"},"stringpacket-logfile-02-03":{"syntax":"swift","content":["\/*","See LICENSE file for this sample’s licensing information.","","Abstract:","A simple log file processor","","Created by Danny Sung on 04\/29\/2022.","*\/","","","import Foundation","import PacketProcessor","","let packetProcessor = PacketProcessor<String>()","","packetProcessor.addHandler(NewlinePacket.self) { packet in","    print(\"Found a full line: \\(packet.text)\")","}","","while let newText = getNewTextFromSomewhere() {","    self.packetProcessor.push(text)","}"],"fileName":"LogReader.swift","identifier":"stringpacket-logfile-02-03","type":"file","fileType":"swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22}]},"doc://PacketProcessor/tutorials/Tutorial-TOC/Reading-log-files":{"role":"article","title":"Reading log files","abstract":[],"identifier":"doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC\/Reading-log-files","kind":"article","type":"topic","url":"\/tutorials\/tutorial-toc\/reading-log-files"},"doc://PacketProcessor/tutorials/PacketProcessor/StringPacket-Logfile#Setup-the-Packet-Processor":{"role":"pseudoSymbol","title":"Setup the Packet Processor","abstract":[{"type":"text","text":"A simple variable-length packet for reading lines of text (e.g. from log files)."}],"identifier":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-Logfile#Setup-the-Packet-Processor","kind":"section","type":"section","url":"\/tutorials\/packetprocessor\/stringpacket-logfile#Setup-the-Packet-Processor"},"doc://PacketProcessor/tutorials/Tutorial-TOC":{"role":"overview","title":"Examples Packets","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":" can help you to easily convert a stream of characters to structured data packets."}],"identifier":"doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC","kind":"overview","type":"topic","url":"\/tutorials\/tutorial-toc"},"stringpacket-logfile-02-04":{"syntax":"swift","content":["\/*","See LICENSE file for this sample’s licensing information.","","Abstract:","A simple log file processor","","Created by Danny Sung on 04\/29\/2022.","*\/","","","import Foundation","import PacketProcessor","","let packetProcessor = PacketProcessor<String>()","","packetProcessor.addHandler(NewlinePacket.self) { packet in","    print(\"Found a full line: \\(packet.text)\")","}","","while let newText = getNewTextFromSomewhere() {","    self.packetProcessor.push(text)","}","","self.packetProcessor.end()"],"fileName":"LogReader.swift","identifier":"stringpacket-logfile-02-04","type":"file","fileType":"swift","highlights":[{"line":23},{"line":24}]},"doc://PacketProcessor/tutorials/PacketProcessor/DataPacket-utf8#The-naive-way":{"role":"pseudoSymbol","title":"The naive way","abstract":[{"type":"text","text":"The standard approach to UTF-8 conversion is to load all UTF-8 data into a "},{"type":"codeVoice","code":"Data()"},{"type":"text","text":" object, then convert to a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" using "},{"type":"codeVoice","code":"String(data:utf8)"},{"type":"text","text":".  While this works, it can be problematic in a couple areas:"}],"identifier":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/DataPacket-utf8#The-naive-way","kind":"section","type":"section","url":"\/tutorials\/packetprocessor\/datapacket-utf8#The-naive-way"},"doc://PacketProcessor/documentation/PacketProcessor/PacketProcessor/addHandler(_:_:)-86o7r":{"role":"symbol","title":"addHandler(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addHandler"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":".Type, ("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"PacketHandlerIdentifier","preciseIdentifier":"s:15PacketProcessor0A17HandlerIdentifiera"}],"abstract":[{"type":"text","text":"Add a packet handler for a specific packet type."}],"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketProcessor\/addHandler(_:_:)-86o7r","kind":"symbol","type":"topic","url":"\/documentation\/packetprocessor\/packetprocessor\/addhandler(_:_:)-86o7r"},"stringpacket-logfile-02-01":{"syntax":"swift","content":["\/*","See LICENSE file for this sample’s licensing information.","","Abstract:","A simple log file processor","","Created by Danny Sung on 04\/29\/2022.","*\/","","","import Foundation","import PacketProcessor","","let packetProcessor = PacketProcessor<String>()"],"fileName":"LogReader.swift","identifier":"stringpacket-logfile-02-01","type":"file","fileType":"swift","highlights":[]},"stringpacket-logfile-01-01":{"syntax":"swift","content":["\/*","See LICENSE file for this sample’s licensing information.","","Abstract:","A simple log file processor","","Created by Danny Sung on 04\/29\/2022.","*\/","","import Foundation","","struct NewlinePacket {","    var text: String","}"],"fileName":"NewlinePacket.swift","identifier":"stringpacket-logfile-01-01","type":"file","fileType":"swift","highlights":[]},"doc://PacketProcessor/tutorials/PacketProcessor/DataPacket-utf8":{"role":"project","title":"UTF-8 to String Converter","estimatedTime":"15min","abstract":[{"type":"text","text":"The standard approach to UTF-8 conversion is to load all UTF-8 data into a "},{"type":"codeVoice","code":"Data()"},{"type":"text","text":" object, then convert to a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" using "},{"type":"codeVoice","code":"String(data:utf8)"},{"type":"text","text":".  While this works, it can be problematic in a couple areas:"}],"identifier":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/DataPacket-utf8","kind":"project","type":"topic","url":"\/tutorials\/packetprocessor\/datapacket-utf8"},"doc://PacketProcessor/documentation/PacketProcessor/PacketProcessor/push(_:)":{"role":"symbol","title":"push(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"push"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CollectionType"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Call when more data in the stream is received."}],"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketProcessor\/push(_:)","kind":"symbol","type":"topic","url":"\/documentation\/packetprocessor\/packetprocessor\/push(_:)"},"stringpacket-logfile-01-02":{"syntax":"swift","content":["\/*","See LICENSE file for this sample’s licensing information.","","Abstract:","A simple log file processor","","Created by Danny Sung on 04\/29\/2022.","*\/","","import Foundation","import PacketProcessor","","struct NewlinePacket: StringPacket {","    var text: String","","    \/\/ Required for all Packet definitions","    static var _packetTypeId = UUID()","","    static func findFirstPacket(context: PacketContext, data: String) -> PacketSearchResult<Self>? {","        \/\/ TBD","    }","","}"],"fileName":"NewlinePacket.swift","identifier":"stringpacket-logfile-01-02","type":"file","fileType":"swift","highlights":[{"line":11},{"line":13},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22}]},"doc://PacketProcessor/tutorials/PacketProcessor/StringPacket-Logfile#Define-the-Packet":{"role":"pseudoSymbol","title":"Define the Packet","abstract":[{"type":"text","text":"A simple variable-length packet for reading lines of text (e.g. from log files)."}],"identifier":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/StringPacket-Logfile#Define-the-Packet","kind":"section","type":"section","url":"\/tutorials\/packetprocessor\/stringpacket-logfile#Define-the-Packet"},"doc://PacketProcessor/tutorials/PacketProcessor/DataPacket-utf8#Processing-a-stream":{"role":"pseudoSymbol","title":"Processing a stream","abstract":[{"type":"text","text":"The standard approach to UTF-8 conversion is to load all UTF-8 data into a "},{"type":"codeVoice","code":"Data()"},{"type":"text","text":" object, then convert to a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" using "},{"type":"codeVoice","code":"String(data:utf8)"},{"type":"text","text":".  While this works, it can be problematic in a couple areas:"}],"identifier":"doc:\/\/PacketProcessor\/tutorials\/PacketProcessor\/DataPacket-utf8#Processing-a-stream","kind":"section","type":"section","url":"\/tutorials\/packetprocessor\/datapacket-utf8#Processing-a-stream"},"doc://PacketProcessor/documentation/PacketProcessor/StringPacket":{"role":"symbol","title":"StringPacket","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StringPacket"}],"abstract":[{"type":"text","text":"String-oriented packets should conform to "},{"type":"codeVoice","code":"StringPacket"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Examples include SMTP, IRC, XMPP."}],"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/StringPacket","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StringPacket"}],"url":"\/documentation\/packetprocessor\/stringpacket"},"doc://PacketProcessor/tutorials/Tutorial-TOC/Converting-UTF-8-byte-streams-to-Strings":{"role":"article","title":"Converting UTF-8 byte streams to Strings","abstract":[],"identifier":"doc:\/\/PacketProcessor\/tutorials\/Tutorial-TOC\/Converting-UTF-8-byte-streams-to-Strings","kind":"article","type":"topic","url":"\/tutorials\/tutorial-toc\/converting-utf-8-byte-streams-to-strings"},"doc://PacketProcessor/documentation/PacketProcessor/PacketProcessor/end()":{"role":"symbol","title":"end()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"end"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Mark the end of input.  It is an error to call "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketProcessor\/push(_:)"},{"type":"text","text":" after declaring end."}],"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketProcessor\/end()","kind":"symbol","type":"topic","url":"\/documentation\/packetprocessor\/packetprocessor\/end()"},"doc://PacketProcessor/documentation/PacketProcessor":{"role":"collection","title":"PacketProcessor","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":" takes care of buffer management when processing packetized data within streams."}],"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor","kind":"symbol","type":"topic","url":"\/documentation\/packetprocessor"},"stringpacket-logfile-02-05":{"syntax":"swift","content":["\/*","See LICENSE file for this sample’s licensing information.","","Abstract:","A simple log file processor","","Created by Danny Sung on 04\/29\/2022.","*\/","","import Foundation","import PacketProcessor","","struct NewlinePacket: StringPacket {","    var text: String","","    \/\/ Required for all Packet definitions","    static var _packetTypeId = UUID()","","    static func findFirstPacket(context: PacketContext, data: String) -> PacketSearchResult<Self>? {","        guard let newlineIndex = data.firstIndex(of: \"\\n\") else {","            return nil","        }","","        let payload = data.prefix(upTo: newlineIndex)","        let packet = NewlinePacket(text: String(payload))","        return PacketSearchResult(packet: packet, numberOfElementsConsumedByPacket: payload.count+1)","    }","","}"],"fileName":"NewlinePacket.swift","identifier":"stringpacket-logfile-02-05","type":"file","fileType":"swift","highlights":[]},"doc://PacketProcessor/documentation/PacketProcessor/PacketHandlerContext/isEnded":{"role":"symbol","title":"isEnded","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isEnded"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"codeVoice","code":"true"},{"type":"text","text":" if input handling has ended on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor"},{"type":"text","text":"."}],"identifier":"doc:\/\/PacketProcessor\/documentation\/PacketProcessor\/PacketHandlerContext\/isEnded","kind":"symbol","type":"topic","url":"\/documentation\/packetprocessor\/packethandlercontext\/isended"}}}